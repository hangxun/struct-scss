@if $use-grids {

/*------------------------------------*\
		$GRIDS
\*------------------------------------*/
/**
 * Fluid and nestable grid system, e.g.:
 *
	 <div class="gw">

			 <div class="g  one-third">
					 <p>One third grid</p>
			 </div><!--

		--><div class="g  two-thirds">
					 <p>Two thirds grid</p>
			 </div><!--

		--><div class="g  one-half">
					 <p>One half grid</p>
			 </div><!--

		--><div class="g  one-quarter">
					 <p>One quarter grid</p>
			 </div><!--

		--><div class="g  one-quarter">
					 <p>One quarter grid</p>
			 </div>

	 </div>
 *
 * Demo: jsfiddle.net/inuitcss/CLYUC
 *
 */


/**
 * Grid wrapper
 */
%grid {
	@include px-and-rem(margin-left, -$grid-gutter);
	list-style: none;
	margin-bottom: 0;

	@if $use-legacy-grid {
		.oldie & {
			display: inline;
			width: 100%;
		}
	}

	@if $use-flexbox-grid {
		@include display(flex);
		@include flex-wrap(wrap);
	}
}

/**
 * very infrequently occuring grid wrappers as children of grid wrappers.
 */
[class*="gw"] > [class*="gw"] { margin-left: 0;}

.gw { @extend %grid;}

	/**
	 * grid items
	 */
	%grid__item {
		@if $use-legacy-grid {
			display: inline-block;
			width: 100%;
			vertical-align: top;
		}

		@include px-and-rem(padding-left, $grid-gutter);

		@if $global-border-box == false { @include vendor(box-sizing, border-box);}
	}

	.g { @extend %grid__item;}

	/**
	 * Allow the content of a column to occupy the full height of the
	 * column
	 *
	 * Child div must have flex: 1; or width: 100%; set to fill horizontal
	 * space
	 *
	 * Does not work for legacy browsers
	 */
	.g_-tall {
		@extend %grid__item;

		@if $use-flexbox-grid { @include display(flex);}
	}

	/**
	 * Columns that automatically fill the remaining horizontal space
	 *
	 * To be used as is, without column width modifiers. Viewport modifiers will
	 * not override the effect of auto.
	 *
	 * Works mostly on <= IE9, mostly
	 * Requires .oldie class on html tag
	 */
	.g_-auto {
		@extend %grid__item;

		@if $use-legacy-grid {
			.oldie & { display: table-cell;}
		}

		@if $use-flexbox-grid { @include flex(1);}
	}

	/**
	 * Columns that shrink wrap around content - ideal for .g_-auto to occupy
	 * remaining space.
	 *
	 * To be used as is, without column width modifiers. Viewport modifiers will
	 * override shrink-wrap effect
	 *
	 * Works mostly on <= IE9, mostly
	 */
	.g_-shrink-wrap {
		@extend %grid__item;
		width: auto;
	}



/**
* reversed grids
*/
%gw_-rev {
	@extend %grid;

	@if $use-legacy-grid {
		.oldie & {
			direction: rtl;
			text-align: right;
		}
	}

	@if $use-flexbox-grid { @include flex-direction(row-reverse);}

	& > %grid__item {
		@if $use-legacy-grid {
			.oldie & {
				direction: ltr;
				text-align: left;
			}
		}
	}
}


/**
* gutterless grids have all the properties of regular grids, minus any spacing.
*/
%gw_-no-guts {
	@extend %grid;
	margin-left: 0;

	& > %grid__item { padding-left: 0;}
}


/**
* centered grids align grid items centrally without needing to use push or pull
* classes.
*/
%gw_-center {
	@extend %grid;

	@if $use-legacy-grid { text-align: center;}

	@if $use-flexbox-grid { @include justify-content(center);}

	& > %grid__item {
		@if $use-legacy-grid { text-align: left;}
	}
}


/**
 * right aligned grids
 */
%gw_-right {
	@extend %grid;

	@if $use-legacy-grid { text-align: right;}

	@if $use-flexbox-grid { @include justify-content(flex-end);}

	& > %grid__item {
		@if $use-legacy-grid { text-align: left;}
	}
}


/**
 * middle aligned grids
 */
%gw_-middle {
	@extend %grid;

	@if $use-flexbox-grid { @include align-items(center);}

	& > %grid__item {
		@if $use-legacy-grid { vertical-align: middle;}
	}
}


/**
 * bottom aligned grids
 */
%gw_-bottom {
	@extend %grid;

	@if $use-flexbox-grid { @include align-items(flex-end);}

	& > %grid__item {
		@if $use-legacy-grid { vertical-align: bottom;}
	}
}

}//endif
